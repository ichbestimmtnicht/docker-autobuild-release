#!/bin/bash

# https://github.com/ichbestimmtnicht/docker-autobuild-release
# Template created 2020 by Ludwig Werner DÃ¶hnert
# This work is licensed under the Creative Commons Attribution 4.0 International License.
# To view a copy of this license, visit http://creativecommons.org/licenses/by/4.0/.

# Install req
apt-get update && apt-get install wget curl git -y -q

source hooks/env.sh

# Hardcoded Variables
LABEL_BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
LABEL_VCS_REF="$(git rev-parse --short HEAD)"

QEMU_USER_STATIC_DOWNLOAD_URL="https://github.com/multiarch/qemu-user-static/releases/download"
QEMU_USER_STATIC_LATEST_TAG=$(curl -s https://api.github.com/repos/multiarch/qemu-user-static/tags \
    | grep 'name.*v[0-9]' \
    | head -n 1 \
    | cut -d '"' -f 4)

# generating manifest file head
echo "image: ${DEST_HUB}/${DEST_USER}/${DEST_REPO}:${DEST_TAG}" > auto-docker-manifest.yaml
echo "manifests:" >> auto-docker-manifest.yaml

# Cycle trough the the arches
for SR_DEST_BUILD_ARCH in ${DEST_ARCHES}
do
    echo "SCRIPT_INFO: Begin Cycle ${SR_DEST_BUILD_ARCH}"
    
    # Set buildfile name and head
    SR_BUILD_FILE="${SR_DEST_BUILD_ARCH}.build.sh"
    SR_BUILD_TAG="${DEST_HUB}/${DEST_USER}/${DEST_REPO}:${DEST_TAG}-${SR_DEST_BUILD_ARCH}"

    # arch specific adjustments and creation of manifest and buildfile
    if [ ${SR_DEST_BUILD_ARCH} = "amd64" ]; then
        echo 'qemu-user-static: Download not required for amd64'
        SR_DEST_ARCH=${SR_DEST_BUILD_ARCH}
        echo "  - image: ${SR_BUILD_TAG}" >> auto-docker-manifest.yaml
        echo "    platform:" >> auto-docker-manifest.yaml
        echo "      architecture: ${SR_DEST_ARCH}" >> auto-docker-manifest.yaml
        echo "      os: ${DEST_OS}" >> auto-docker-manifest.yaml
        
        echo "echo \"Building ${SR_DEST_BUILD_ARCH}\"" >> ${SR_BUILD_FILE}
        echo "docker build \\" >> ${SR_BUILD_FILE}
        echo "    --tag ${SR_BUILD_TAG} \\" >> ${SR_BUILD_FILE}

    elif [ ${SR_DEST_BUILD_ARCH} = "arm32v7" ]; then
        SR_QEMU_USER_STATIC_ARCH="arm"
        curl -SL "${QEMU_USER_STATIC_DOWNLOAD_URL}/${QEMU_USER_STATIC_LATEST_TAG}/x86_64_qemu-${SR_QEMU_USER_STATIC_ARCH}-static.tar.gz" \
            | tar xzv
        SR_DEST_ARCH="arm"
        echo "  - image: ${SR_BUILD_TAG}" >> auto-docker-manifest.yaml
        echo "    platform:" >> auto-docker-manifest.yaml
        echo "      architecture: ${SR_DEST_ARCH}" >> auto-docker-manifest.yaml
        echo "      os: ${DEST_OS}" >> auto-docker-manifest.yaml
        echo "      variant: v7" >> auto-docker-manifest.yaml
        
        echo "echo \"Building ${SR_DEST_BUILD_ARCH}\"" >> ${SR_BUILD_FILE}
        echo "docker build \\" >> ${SR_BUILD_FILE}
        echo "    --tag ${SR_BUILD_TAG} \\" >> ${SR_BUILD_FILE}

    elif [ ${SR_DEST_BUILD_ARCH} = "arm64v8" ]; then
        SR_QEMU_USER_STATIC_ARCH="aarch64"
        curl -SL "${QEMU_USER_STATIC_DOWNLOAD_URL}/${QEMU_USER_STATIC_LATEST_TAG}/x86_64_qemu-${SR_QEMU_USER_STATIC_ARCH}-static.tar.gz" \
            | tar xzv
        SR_DEST_ARCH="arm64"
        echo "  - image: ${SR_BUILD_TAG}" >> auto-docker-manifest.yaml
        echo "    platform:" >> auto-docker-manifest.yaml
        echo "      architecture: ${SR_DEST_ARCH}" >> auto-docker-manifest.yaml
        echo "      os: ${DEST_OS}" >> auto-docker-manifest.yaml
        echo "      variant: v8" >> auto-docker-manifest.yaml
        
        echo "echo \"Building ${SR_DEST_BUILD_ARCH}\"" >> ${SR_BUILD_FILE}
        echo "docker build \\" >> ${SR_BUILD_FILE}
        echo "    --tag ${SR_BUILD_TAG} \\" >> ${SR_BUILD_FILE}

    else 
        echo "SCRIPT_ERROR: $SR_DEST_BUILD_ARCH not referenced"
        exit 1
    fi

    # Decisions for the buildfile
    if [ ${BUILD_SINGLE_DOCKERFILE} = true ]; then
        echo " SCRIPT_WARNING: You are using a feature that is not fully implemented yet!"
        echo " SCRIPT_WARNING: Please change BUILD_SINGLE_DOCKERFILE to false in your env.sh"
        echo "    --file Dockerfile \\" >> ${SR_BUILD_FILE}
    else
        echo "    --file hooks/${SR_DEST_BUILD_ARCH}.Dockerfile \\" >> ${SR_BUILD_FILE}
    fi

    if [ ${BUILD_COMPRESS} = true ]; then
        echo "    --compress \\" >> ${SR_BUILD_FILE}
    else 
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: Not compressing"
    fi

    if [ ${BUILD_PULL} = true ]; then
        echo "    --pull \\" >> ${SR_BUILD_FILE}
    else 
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: Not pulling" 
    fi

    if [ ${BUILD_FORCE_RM} = true ]; then
        echo "    --force-rm \\" >> ${SR_BUILD_FILE}
    else 
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: No force rm"
    fi

    if [ ${BUILD_ISOLATION} = true ]; then
        echo " SCRIPT_WARNING: You are using a feature that is not fully implemented yet!"
        echo "    --isolation \\" >> ${SR_BUILD_FILE}
    else 
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: No build isolation"
    fi

    if [ ${BUILD_NO_CACHE} = true ]; then
        echo "    --no-cache \\" >> ${SR_BUILD_FILE}
    else 
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: No cache"
    fi

    if ${BUILD_PLATFORM} = true; then
        echo "SCRIPT_WARNING: ${SR_DEST_BUILD_ARCH}: Experimental is not supported"
        echo "    --platform ${SR_DEST_ARCH} \\" >> ${SR_BUILD_FILE}
    else 
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: platform not set"
    fi

    if [ ${BUILD_QUIET} = true ]; then
        echo "    -q \\" >> ${SR_BUILD_FILE}
    else 
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: quit not set"
    fi

    if [ ${BUILD_SQUASH} = true ]; then
        echo "SCRIPT_WARNING ${SR_DEST_BUILD_ARCH}: Experimental is not supported"
        echo "    --squash \\" >> ${SR_BUILD_FILE}
    else 
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: squash not set"
    fi

    if [ ${BUILD_TARGET_STAGE} = false ]; then
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: no target stage selected"
    else 
        echo "    --target ${BUILD_TARGET_STAGE} \\" >> ${SR_BUILD_FILE}
    fi

    # Loops for the buildfile
    # Get all BUILD_HOST_ variables
    if [ ${BUILD_HOSTS} == false ]; then
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: no hosts"
    else 
        set | awk -F "=" '{print $1}' | grep ".*BUILD_HOST_.*" | 
        while read SR_BUILDHOST; do
            SR_BUILDHOST_NAME=`echo ${SR_BUILDHOST} | sed 's/BUILD_HOST_//g'`
            echo "    --build-arg  ${SR_BUILDHOST_NAME}=\"${!SR_BUILDHOST}\" \\" >> ${SR_BUILD_FILE}
            echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}:    --build-arg  ${SR_BUILDHOST_NAME}=\"${!SR_BUILDHOST}\" \\"
        done
    fi

    if [ ${BUILD_CGROUPS} == false ]; then
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: no cgroups"
    else
        # Get all BUILD_CGROUP_ variables
        set | awk -F "=" '{print $1}' | grep ".*BUILD_CGROUP_.*" | 
        while read SR_BUILDCGROUP; do
            SR_BUILDCGROUP_NAME=`echo ${SR_BUILDCGROUP} | sed 's/BUILD_CGROUP_//g'`
            echo "    --build-arg  ${SR_BUILDCGROUP_NAME}=\"${!SR_BUILDCGROUP}\" \\" >> ${SR_BUILD_FILE}
            echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}:    --build-arg  ${SR_BUILDCGROUP_NAME}=\"${!SR_BUILDCGROUP}\" \\"
        done
    fi

    if [ ${BUILD_ARGS} == false ]; then
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}: no build arguments"
    else
        # Get all BUILD_ARG_ variables
        set | awk -F "=" '{print $1}' | grep ".*BUILD_ARG_.*" | 
        while read SR_BUILDARG; do
            SR_BUILDARG_NAME=`echo ${SR_BUILDARG} | sed 's/BUILD_ARG_//g'`
            echo "    --build-arg  ${SR_BUILDARG_NAME}=\"${!SR_BUILDARG}\" \\" >> ${SR_BUILD_FILE}
            echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}:    --build-arg  ${SR_BUILDARG_NAME}=\"${!SR_BUILDARG}\" \\"
        done
    fi
    
    # Get all LABEL_ variables
    set | awk -F "=" '{print $1}' | grep ".*LABEL_.*" | 
    while read SR_BUILDLABEL; do
        # Convert __ to - for the labelname
        SR_BUILDLABEL_NAME=`echo "${SR_BUILDLABEL}" | sed 's/LABEL_//g' | sed 's/__/-/g'`
        echo "    --label  ${SR_BUILDLABEL_NAME}=\"${!SR_BUILDLABEL}\" \\" >> ${SR_BUILD_FILE}
        echo "SCRIPT_INFO ${SR_DEST_BUILD_ARCH}:    --label  ${SR_BUILDLABEL_NAME}=\"${!SR_BUILDLABEL}\" \\"
    done

    # Adding Buildcontext
    echo "    ." >> ${SR_BUILD_FILE}

    echo "SCRIPT_INFO: Buildfiles and Manifest created for ${SR_DEST_BUILD_ARCH}"
done

echo "SCRIPT_INFO: Exit post_checkout"

exit 0
